Practical File 
Sub- Computer Graphics 
 Name- Abhishek Yadav 
Course- B.Sc. Hons. CS 
Roll No – 19/78017
Sem – VI 
Year- III 
Q1: Write a program to implement Bresenhams line drawing algorithm.  #include<graphics.h> 
#include<stdlib.h> 
#include<stdio.h> 
#include<iostream.h> 
#include<math.h> 
#include<conio.h> 
void main() 
{ 
 int gdriver = DETECT, gmode, errorcode; 
 int x1,x2,y1,y2; 
 float m,ynew; 
 initgraph(&gdriver, &gmode, "..\\bgi"); 
 errorcode = graphresult(); 
 if (errorcode != grOk) 
 { 
 printf("Graphics error: %s\n", grapherrormsg(errorcode)); 
 printf("Press any key to halt:"); 
 getch(); 
 exit(1); 
 } 
 cout<<"\nEnter x1: "; 
 cin>>x1; 
 cout<<"\nEnter x2: "; 
 cin>>x2; 
 cout<<"\nEnter y1: "; 
 cin>>y1; 
 cout<<"\nEnter y2: "; 
 cin>>y2; 
 m=(y2-y1)/(float)(x2-x1); 
 if(abs(m) < 1) 
 { 
 if(x1 < x2)
 { 
 putpixel(x1,y1,GREEN); 
 ynew=y1; 
 for(int i=x1;i < x2;i++) 
 { 
 x1++; 
 ynew+=m; 
 putpixel(x1,floor(ynew+0.5),RED); 
 } 
 } 
 else 
 { 
 putpixel(x2,y2,GREEN); 
 ynew=y2; 
 for(int i=x2;i < x1;i++) 
 { 
 x2++; 
 ynew+=m; 
 putpixel(x2,floor(ynew+0.5),RED); 
 } 
 } 
 } 
 getch(); 
 closegraph(); 
 } 
Q2. Write a program to implement mid-point circle drawing algorithm. #include<graphics.h> 
#include<graphics.h> 
#include<stdlib.h> 
#include<stdio.h> 
#include<iostream.h> 
#include<math.h> 
#include<conio.h> 
void plot8(int x, int y, int cx, int cy)
{ 
 putpixel(x+cx,y+cy,RED); 
 putpixel(y+cx,x+cy,RED); 
 putpixel(y+cx,-x+cy,RED); 
 putpixel(x+cx,-y+cy,RED); 
 putpixel(-x+cx,-y+cy,RED); 
 putpixel(-y+cx,-x+cy,RED); 
 putpixel(-y+cx,x+cy,RED); 
 putpixel(-x+cx,y+cy,RED); 
} 
void main() 
{ 
 int gdriver = DETECT, gmode, errorcode; 
 int x,y,r,cx,cy,E,SE,D; 
 initgraph(&gdriver, &gmode, "..\\bgi"); 
 errorcode = graphresult(); 
 if (errorcode != grOk) 
 { 
 printf("Graphics error: %s\n", grapherrormsg(errorcode));  printf("Press any key to halt:"); 
 getch(); 
 exit(1); 
 } 
 cout<<"\nEnter centre(x): "; 
 cin>>cx; 
 cout<<"\nEnter centre(y): "; 
 cin>>cy; 
 cout<<"\nEnter radius: "; 
 cin>>r;  
 x=0; 
 y=r; 
 plot8(x,y,cx,cy); 
 D=1-r; 
 while(y>x)
 { 
 if(D<=0) 
 { 
 E=(2*x)+3; 
 D+=E; 
 x++; 
 } 
 else 
 { 
 SE=(2*x)-(2*y)+5; 
 D+=SE; 
 x++; 
 y--; 
 } 
 plot8(x,y,cx,cy); 
 } 
 getch(); 
 closegraph(); 
 } 
Q3. Write a program to clip a line using Cohen and Sutherland line clipping  algorithm. 
 #include<graphics.h> 
 #include<stdlib.h> 
 #include<stdio.h> 
 #include<iostream.h> 
 #include<conio.h> 
 typedef unsigned int outcode; 
 enum { TOP = 1, BOTTOM = 2, RIGHT = 4, LEFT = 8 }; 
 outcode comp_Outcode ( double x, double y, double xmin, double xmax, double ymin, double ymax)  { 
 outcode code = 0 
 if ( y > ymax ) 
 code |= TOP; 
 else if ( y < ymin )
 code |= BOTTOM; 
 if ( x > xmax ) 
 code |= RIGHT; 
 else if ( x < xmin ) 
 code |= LEFT; 
 return code; 
 }  
 void cohen_lineclipping ( double x_init, double y_init, double x1, double y1, double xmin, double xmax, double  ymin, double ymax ) 
 { 
 outcode outcode0, outcode1, outcodeout ; 
 int accept = 0, done = 0; 
 outcode0 = comp_Outcode ( x_init, y_init, xmin, xmax, ymin, ymax); 
 outcode1 = comp_Outcode ( x1, y1, xmin, xmax, ymin, ymax); 
 do 
 { 
 if (!(outcode0 | outcode1)) 
 { 
 accept = 1; 
 done = 1; 
 } 
 else if ( outcode0 & outcode1 ) 
 { 
 done = 1; 
 } 
 else 
 { 
 double x, y; 
 outcodeout = outcode0 ? outcode0 : outcode1 ; 
 if ( outcodeout & TOP ) 
 { 
 x = x_init + ( ymax - y_init ) * ( x1 - x_init ) / ( y1 - y_init ) ; 
 y = ymax ; 
 }
 else if ( outcodeout & BOTTOM ) 
 { 
 x = x_init + ( ymin - y_init ) * ( x1 - x_init ) / ( y1 - y_init ) ;  y = ymin ; 
 } 
 else if ( outcodeout & LEFT ) 
 { 
 y = y_init + ( xmin - x_init ) * ( y1 - y_init ) / ( x1 - x_init );  x = xmin; 
 } 
 else 
 { 
 y = y_init + ( xmax - x_init ) * ( y1 - y_init ) / ( x1 - x_init );  x = xmax ; 
 } 
 if ( outcodeout == outcode0 ) 
 { 
 x_init = x; 
 y_init = y; 
 outcode0 = comp_Outcode ( x_init, y_init, xmin, xmax, ymin, ymax );  } 
 else 
 { 
 x1 = x; 
 y1 = y; 
 outcode1 = comp_Outcode ( x1, y1, xmin, xmax, ymin, ymax );  } 
 } 
 }while ( done == 0 ); 
 if ( accept ) 
 line ( x_init, y_init, x1, y1 ); 
 } 
 int main(void) 
 {
 int gdriver = DETECT, gmode, errorcode; 
 double x_init, x1, y_init, y1, xmin, ymin, xmax, ymax;  initgraph(&gdriver, &gmode, "C:\\TC\\BGI"); 
 errorcode = graphresult(); 
 if (errorcode != grOk) 
 { 
 printf("Graphics error: %s\n", grapherrormsg(errorcode));  printf("Press any key to halt:"); 
 getch(); 
 exit(1); 
 } 
 cout<<"\n Enter the start and end pt. of the line : ";  cout<<"\n Enter first coordinate : "; 
 cin>> x_init >> y_init  
 cout<<"\n Enter second coordinate : "; 
 cin>> x1 >> y1 ; 
 cout<<"\n\n Enter the coodinates of the clipping rectangle : ";  cout<<"\n Enter (xmin, ymin) : " ; 
 cin>> xmin >> ymin; 
 cout<<"\n Enter (xmax, ymax) : " ; 
 cin>> xmax >> ymax; 
 line ( xmin, ymin, xmax, ymin ); 
 line ( xmin, ymin, xmin, ymax ); 
 line ( xmin, ymax, xmax, ymax ); 
 line ( xmax, ymin, xmax, ymax ); 
 cohen_lineclipping ( x_init, y_init, x1, y1, xmin, xmax, ymin, ymax);  setcolor ( 10 ); 
 line ( x_init+50, y_init, x1+50, y1); 
 getch(); 
 closegraph(); 
 return 0; 
 }
Q4. Write a program to clip a polygon using Sutherland Hodgeman algorithm.  #include<graphics.h> 
 #include<iostream.h> 
 #include<stdlib.h> 
 #include<stdio.h> 
 #include<conio.h> 
 int poly[100],xmin,xmax,ymin,ymax,n; 
 void left_clip(int xmin,int ymin,int xmax,int ymax) 
 { 
 int temp[100],i,j=0,count=0,x1,y1,x2,y2; 
 for(i=0;i<2*n;i+=2) 
 { 
 x1 = poly[i]; 
 y1 = poly[i+1]; 
 x2 = poly[i+2]; 
 y2 = poly[i+3]; 
 if(x1<xmin && x2<xmin) 
 {} 
 else if(x1>=xmin && x2>=xmin) 
 { 
 temp[j] = x2; 
 temp[j+1] = y2; 
 j+=2; 
 count++; 
 } 
 else if(x1=xmin) 
 { 
 int x=xmin; 
 int y= y1 + (xmin-x1)*(float)(y2-y1)/(x2-x1); 
 temp[j]=x; 
 temp[j+1]=y; 
 temp[j+2]=x2; 
 temp[j+3]=y2; 
 j+=4;
 count+=2; 
 } 
 else 
 { 
 int x=xmin; 
 int y= y1 + (xmin-x1)*(float)(y2-y1)/(x2-x1);  temp[j] = x; 
 temp[j+1] = y; 
 j+=2; 
 count++; 
 } 
 } 
 n=count; 
 temp[j]=temp[0]; 
 temp[j+1]=temp[1]; 
 for(i=0;i<2*(n+1);i++) 
 { 
 poly[i]=temp[i]; 
 } 
 } void right_clip(int xmin,int ymin,int xmax,int ymax)  { 
 int temp[100],i,j=0,count=0,x1,y1,x2,y2;  for(i=0;i<2*n;i+=2) 
 { 
 x1 = poly[i]; 
 y1 = poly[i+1]; 
 x2 = poly[i+2]; 
 y2 = poly[i+3]; 
 if(x1>xmax && x2>xmax) 
 { 
 } 
 if(x1<=xmax && x2<=xmax)
 { 
 temp[j] = x2; 
 temp[j+1] = y2; 
 j+=2; 
 count+=1; 
 } 
 else if(x1>xmax && x2<=xmax) 
 { 
 int x=xmax; 
 int y= y1 + (xmax-x1)*(float)(y2-y1)/(x2-x1);  temp[j]=x; 
 temp[j+1]=y; 
 temp[j+2]=x2; 
 temp[j+3]=y2; 
 j+=4; 
 count+=2; 
 } 
 else 
 { 
 int x=xmax; 
 int y= y1 + (xmax-x1)*(float)(y2-y1)/(x2-x1);  temp[j] = x; 
 temp[j+1] = y; 
 j+=2; 
 count+=1; 
 } 
 } 
 n=count; 
 temp[j]=temp[0]; 
 temp[j+1]=temp[1]; for(i=0;i<2*(n+1);i++)  { 
 poly[i]=temp[i]; 
 } 
 }
 void bottom_clip(int xmin,int ymin,int xmax,int ymax)  { 
 int temp[100],i,j=0,count=0,x1,y1,x2,y2;  for(i=0;i<2*n;i+=2) 
 { 
 x1 = poly[i]; 
 y1 = poly[i+1]; 
 x2 = poly[i+2]; 
 y2 = poly[i+3]; 
 if(y1<ymin && y2<ymin) 
 { 
 } 
 else if(y1>=ymin && y2>=ymin) 
 { 
 temp[j] = x2; 
 temp[j+1] = y2; 
 j+=2; 
 count++; 
 } 
 else if(y1<ymin && y2>=ymin) 
 { 
 int x= x1 +(float)((ymin-y1)*(x2-x1))/(y2-y1);  int y= ymin; 
 temp[j]=x; 
 temp[j+1]=y; 
 temp[j+2]=x2; 
 temp[j+3]=y2; 
 j+=4; 
 count+=2; 
 } 
 else 
 { 
 int x= x1 +(float)((ymin-y1)*(x2-x1))/(y2-y1);  int y= ymin;
 temp[j] = x; 
 temp[j+1] = y; 
 j+=2; 
 count++; 
 } 
 } 
 n=count; 
 temp[j]=temp[0]; 
 temp[j+1]=temp[1]; 
 for(i=0;i<2*(n+1);i++) 
 { 
 poly[i]=temp[i]; 
 } 
 } 
 void top_clip(int xmin,int ymin,int xmax,int ymax)  { 
 int temp[100],i,j=0,count=0,x1,y1,x2,y2;  for(i=0;i<2*n;i+=2) 
 { 
 x1 = poly[i]; 
 y1 = poly[i+1]; 
 x2 = poly[i+2]; 
 y2 = poly[i+3]; 
 if(y1>ymax && y2>ymax) 
 { 
 } 
 else if(y1<=ymax && y2<=ymax) 
 { 
 temp[j] = x2; 
 temp[j+1] = y2; 
 j+=2; 
 count++; 
 } 
 else if(y1>ymax && y2<=ymax)
 { 
 int x= x1 + (ymax-y1)*(float)(x2-x1)/(y2-y1);  int y= ymax; 
 temp[j]=x; 
 temp[j+1]=y; 
 temp[j+2]=x2; 
 temp[j+3]=y2; 
 j+=4; 
 count+=2; 
 } 
 else 
 { 
 int x= x1 + (ymax-y1)*(float)(x2-x1)/(y2-y1);  int y= ymax; 
 temp[j] = x; 
 temp[j+1] = y; 
 j+=2; 
 count++; 
 } 
 } 
 n=count; 
 temp[j]=temp[0]; 
 temp[j+1]=temp[1]; 
 for(i=0;i<2*(n+1);i++) 
 { 
 poly[i]=temp[i]; 
 } 
 } 
 int main(void) 
 { 
 int gd = DETECT, gm, errorcode; 
 int xmax, ymax; 
 initgraph(&gd, &gm, "C:\\TC\\BGI");
 errorcode = graphresult(); 
 if (errorcode != grOk) 
 { 
 printf("Graphics error: %s\n", grapherrormsg(errorcode));  printf("Press any key to halt:"); 
 getch(); 
 exit(1); 
 } 
 int i; 
 setcolor(RED); 
 xmin=200; 
 ymin=200; 
 xmax=300; 
 ymax=300; 
 rectangle(100,100,300,300); 
 cout<<"Enter the no. of vertices: "; 
 cin>>n; 
 for(i=0;i<2*n;i+=2) 
 { 
 cout<<"Enter co-ordinates of vertex "<<(i/2+1)<<": ";  cin>>poly[i]>>poly[i+1]; 
 } 
 setcolor(YELLOW); 
 poly[2*n]=poly[0]; 
 poly[2*n+1]=poly[1]; 
 drawpoly(n+1,poly); 
 left_clip(xmin,ymin,xmax,ymax); 
 right_clip(xmin,ymin,xmax,ymax); 
 bottom_clip(xmin,ymin,xmax,ymax); 
 top_clip(xmin,ymin,xmax,ymax); 
 cout<<"after clipping"<<endl; 
 setcolor(BLUE); 
 drawpoly(n+1,poly);
 getch(); 
 closegraph(); 
 return 0; 
 } 
Q5. Write a program to fill a polygon using Scan line fill algorithm.  #include<iostream> 
 #include<conio.h> 
 #include<graphics.h> 
 using namespace std; 
 struct edge 
 { 
 int x1,y1,x2,y2,flag; 
 }; 
 int main() 
 { 
 int gd=DETECT,gm,n,i,j,k; 
 edge ed[10], temped; 
 float dx,dy,m[10],x_int[10],inter_x[10]; 
 int x[10],y[10],ymax=0,ymin=480,yy,temp; 
 initgraph(&gd,&gm,""); 
 /*read the number of vertices of the polygon*/ 
 cout<<"Enter the no. of vertices of the polygon : "; 
 cin>>n; 
 cout<<"\nEnter the vertices :- \n"; 
 for(i=0;i<n;i++)  
 { 
 cout<<"P"<<i+1<<" : "; 
 cin>>x[i]>>y[i]; 
 if(y[i]>ymax) 
 ymax=y[i]; 
 if(y[i]<ymin) 
 ymin=y[i];
 ed[i].x1=x[i]; 
 ed[i].y1=y[i];  
 } 
 for(i=0;i<n-1;i++)  
 { 
 ed[i].x2=ed[i+1].x1; 
 ed[i].y2=ed[i+1].y1; 
 ed[i].flag=0; 
 } 
 ed[i].x2=ed[0].x1; 
 ed[i].y2=ed[0].y1; 
 ed[i].flag=0; 
 /*Check for y1>y2, if not interchnge y1 and y2 */  for(i=0;i<n;i++) 
 { 
 if(ed[i].y1 < ed[i].y2)  
 { 
 temp=ed[i].x1; 
 ed[i].x1=ed[i].x2; 
 ed[i].x2=temp; 
 temp=ed[i].y1; 
 ed[i].y1=ed[i].y2; 
 ed[i].y2=temp; 
 } 
 } 
 for(i=0;i<n;i++) 
 { 
 line(ed[i].x1, ed[i].y1,ed[i].x2,ed[i].y2);  } 
 for(i=0;i<n-1;i++) 
 { 
 for(j=0;j<n-1;j++)  
 {
 if(ed[j].y1<ed[j+1].y1)   { 
 temped=ed[j]; 
 ed[j]=ed[j+1]; 
 ed[j+1]=temped;  } 
 if(ed[j].y1==ed[j+1].y1)   { 
 if(ed[j].y2<ed[j+1].y2)   { 
 temped=ed[j];  ed[j]=ed[j+1];  ed[j+1]=temped;  } 
 if (ed[j].y2==ed[j+1].y2)  { 
 if(ed[j].x1<ed[j+1].x1)   { 
 temped=ed[j];  ed[j]=ed[j+1];  ed[j+1]=temped;  } 
 } 
 } 
 } 
 } 
 for(i=0;i<n;i++) 
 { 
 dx=ed[i].x2-ed[i].x1;  dy=ed[i].y2-ed[i].y1; 
 if(dy==0) 
 {
 m[i]=0; 
 } 
 else  
 { 
 m[i]=dx/dy;  
 } 
 inter_x[i]=ed[i].x1; 
 } 
 yy=ymax; 
 while(yy>ymin) 
 { 
 for(i=0;i<n;i++)  
 { 
 if(yy>ed[i].y2 && yy<=ed[i].y1)   { 
 ed[i].flag=1;  
 } 
 else 
 { 
 ed[i].flag=0; 
 } 
 } 
 j=0; 
 for(i=0;i<n;i++) 
 { 
 if(ed[i].flag==1) 
 { 
 if(yy==ed[i].y1) 
 { 
 x_int[j]==ed[i].x1; 
 j++; 
 if(ed[i-1].y1==yy && ed[i-1].y1<yy) 
 { 
 x_int[j]=ed[i].x1; 
 j++;  
 } 
 if(ed[i+1].y1==yy && ed[i+1].y1<yy)  { 
 x_int[j]=ed[i].x1; 
 j++;  
 } 
 } 
 else  
 { 
 x_int[j]=inter_x[i]+(-m[i]);  inter_x[i]=x_int[j]; 
 j++;  
 }  
 } 
 } 
 for(i=0;i<j;i++) 
 { 
 for(k=0;k<j-1;k++) 
 { 
 if(x_int[k]>x_int[k+1]) 
 { 
 temp=(int)x_int[k]; 
 x_int[k]=x_int[k+1]; 
 x_int[k+1]=temp; 
 } 
 } 
 } 
 for(i=0;i<j;i=i+2) 
 { 
 line((int)x_int[i],yy,(int)x_int[i+1],yy);
 } 
 yy--; 
 delay(10); 
 } 
 getch(); 
 return 0; 
 } 
Q6. Write a program to apply various 2D transformations on a 2D object (use  homogenous coordinates). 
 #include <conio.h> 
 #include <iostream> 
 #include <graphics.h> 
 using namespace std; 
 //Shifted Origin at (400,400) 
 int c = 400; 
 //Declaration of class point 
 class point 
 { 
 public: 
 float x,y; 
 }; 
 class matrix 
 { 
 private: 
 point p[20]; 
 point t[2]; 
 point pp[1]; 
 int points; 
 public: 
 void read()
 { 
 setcolor(2); 
 cout<<"Enter no. of points : "; 
 cin>>points; 
 cout<<"\nCAUTION : Enter value between 0 and 400 for x and y values!!!\n";  cout<<"\nEnter coordinates :-\n"; 
 for(int i=0;i<points;i++) 
 { 
 cout<<"Enter P"<<i+1<<" : "; 
 cin>>p[i].x>>p[i].y; 
 } 
 } 
 void readT() 
 { 
 cout<<"\nEnter Transformation matrix (2X2) :- \n"; 
 for(int i=0;i<2;i++) 
 cin>>t[i].x>>t[i].y; 
 } 
 void transform() 
 { 
 setcolor(3); 
 for(int i=0;i<points;i++) 
 { 
 pp[0].x = p[i].x*t[0].x + p[i].y*t[1].x; 
 pp[0].y = p[i].x*t[0].y + p[i].y*t[1].y; 
 p[i].x = (int)(pp[0].x); 
 p[i].y = (int)(pp[0].y); 
 } 
 } 
 void draw() 
 {
 for(int i=0;i<points;i++) 
 line(c+p[i].x, c-p[i].y, c+p[(i+1)%points].x, c-p[(i+1)%points].y);  //c is added to represent points in shifted origin system  } 
 void show() 
 { 
 cout<<endl; 
 for(int i=0;i<points;i++) 
 cout<<p[i].x<<" "<<p[i].y<<endl; 
 } 
 }; 
 void printaxis() 
 { 
 setcolor(YELLOW); 
 line(c,0,c,c*2); 
 line(0,c,c*2,c); 
  
 for(int i=50;i<c*2;i+=50) line(c-10,i,c+10,i); 
 for(int i=50;i<c*2;i+=50) line(i,c-10,i,c+10); 
 setcolor(WHITE); 
 } 
 int main() 
 { 
 initwindow(c*2,c*2); 
 printaxis(); 
 matrix m; 
 m.read(); 
 m.show(); 
 m.draw(); 
 m.readT(); 
 m.transform(); 
 m.show();
 m.draw(); 
 getch(); 
 return 0; 
 } 
Q7. Write a program to apply various 3D transformations on a 3D object and then  apply parallel and perspective projection on it. 
 #include<iostream.h> 
 #include<dos.h> 
 #include<stdio.h> 
 #include<math.h> 
 #include<conio.h> 
 #include<graphics.h> 
 #include<process.h> 
 int gd=DETECT,gm; 
 double x1,x2,y1,y2; 
 void show_message() 
{ 
 char *mess[]={"-","=","["," ","3","D","-","T","r","a","n","s","f","o","r","m","a","t","i","o","n"," ","]","=","-"};  int xx=28,xxx=52,i,j; 
 _setcursortype(_NOCURSOR); 
 for(i=0,j=24;i < 15,j>=12;i++,j--) 
 { 
 gotoxy(xx,1); 
 cout<<mess[i]; 
 xx++; 
 gotoxy(xxx,1); 
 cout<<mess[j]; 
 xxx--; 
 delay(50); 
 } 
 _setcursortype(_NORMALCURSOR); 
 }
 void draw_cube(double edge[20][3])  { 
 initgraph(&gd,&gm,"..\bgi"); 
 int i; 
 clearviewport(); 
 for(i=0;i < 19;i++) 
 { 
 x1=edge[i][0]+edge[i][2]*(cos(2.3562));  y1=edge[i][1]-edge[i][2]*(sin(2.3562));  x2=edge[i+1][0]+edge[i+1][2]*(cos(2.3562));  y2=edge[i+1][1]-edge[i+1][2]*(sin(2.3562));  line(x1+320,240-y1,x2+320,240-y2);  } 
 line(320,240,320,25); 
 line(320,240,550,240); 
 line(320,240,150,410); 
 getch(); 
 closegraph(); 
} 
 void scale(double edge[20][3]) 
{ 
 double a,b,c; 
 int i; 
 cout<<"Enter The Scaling Factors "<<endl;  cin>>a>>b>>c; 
 initgraph(&gd,&gm,"..\bgi"); 
 clearviewport(); 
 for(i=0;i < 20;i++) 
 { 
 edge[i][0]=edge[i][0]*a; 
 edge[i][1]=edge[i][1]*b; 
 edge[i][2]=edge[i][2]*c;
 } 
 draw_cube(edge); 
 closegraph(); 
 } 
 void translate(double edge[20][3]) 
{ 
int a,b,c; 
int i; 
 cout<<"Enter The Translation Factors"<<endl;  cin>>a>>b>>c; 
 initgraph(&gd,&gm,"..\bgi"); 
 clearviewport(); 
for(i=0;i < 20;i++) 
 { 
 edge[i][0]+=a; 
 edge[i][0]+=b; 
 edge[i][0]+=c; 
 } 
 draw_cube(edge); 
closegraph(); 
} 
 void rotate(double edge[20][3]) 
{ 
int ch; 
int i; 
double temp,theta,temp1; 
clrscr(); 
 cout<<"-=[ Rotation About ]=-"<<endl;  cout<<"1:==> X-Axis "<<endl; 
 cout<<"2:==> Y-Axis"<<endl; 
 cout<<"3:==> Z-Axis "<<endl; 
 cout<<"Enter Your Choice "<<endl;
 cin>>ch; 
 switch(ch) 
{ 
case 1: 
 cout<<" Enter The Angle "; 
 cin>>theta; 
 theta=(theta*3.14)/180; 
 for(i=0;i < 20;i++) 
 { 
 edge[i][0]=edge[i][0]; 
 temp=edge[i][1]; 
 temp1=edge[i][2]; 
 edge[i][1]=temp*cos(theta)-temp1*sin(theta);  edge[i][2]=temp*sin(theta)+temp1*cos(theta);  } 
 draw_cube(edge); 
 break; 
case 2: 
 cout<<" Enter The Angle "; 
 cin>>theta; 
 theta=(theta*3.14)/180; 
 for(i=0;i < 20;i++) 
 { 
 edge[i][1]=edge[i][1]; 
 temp=edge[i][0]; 
 temp1=edge[i][2]; 
 edge[i][0]=temp*cos(theta)+temp1*sin(theta);  edge[i][2]=-temp*sin(theta)+temp1*cos(theta);  } 
 draw_cube(edge); 
 break; 
 case 3:
 cout<<" Enter The Angle "; 
 cin>>theta; 
 theta=(theta*3.14)/180; 
 for(i=0;i < 20;i++) 
 { 
 edge[i][2]=edge[i][2]; 
 temp=edge[i][0]; 
 temp1=edge[i][1]; 
 edge[i][0]=temp*cos(theta)-temp1*sin(theta);  edge[i][1]=temp*sin(theta)+temp1*cos(theta);  } 
 draw_cube(edge); 
 break; 
} 
} 
 void reflect(double edge[20][3]) 
{ 
int ch; 
int i; 
clrscr(); 
 cout<<"-=[ Reflection About ]=-"<<endl; 
 cout<<"1:==> X-Axis"<<endl; 
 cout<<"2:==> Y-Axis "<<endl; 
 cout<<"3:==> Z-Axis "<<endl; 
 cout<<" Enter Your Choice "<<endl; 
 cin>>ch; 
 switch(ch) 
{ 
case 1: 
 for(i=0;i < 20;i++) 
 { 
 edge[i][0]=edge[i][0]; 
 edge[i][1]=-edge[i][1];
 edge[i][2]=-edge[i][2]; 
 } 
 draw_cube(edge); 
 break; 
case 2: 
 for(i=0;i < 20;i++) 
 { 
 edge[i][1]=edge[i][1]; 
 edge[i][0]=-edge[i][0]; 
 edge[i][2]=-edge[i][2]; 
 } 
 draw_cube(edge); 
 break; 
case 3: 
 for(i=0;i < 20;i++) 
 { 
 edge[i][2]=edge[i][2]; 
 edge[i][0]=-edge[i][0]; 
 edge[i][1]=-edge[i][1]; 
 } 
 draw_cube(edge); 
 break; 
} 
} 
 void perspect(double edge[20][3]) 
{ 
int ch; 
int i; 
double p,q,r; 
clrscr(); 
 cout<<"-=[ Perspective Projection About ]=-"<<endl;
 cout<<"1:==> X-Axis "<<endl; 
 cout<<"2:==> Y-Axis "<<endl; 
 cout<<"3:==> Z-Axis"<<endl; 
 cout<<" Enter Your Choice :="<<endl;  cin>>ch; 
 switch(ch) 
{ 
case 1: 
 cout<<" Enter P :="; 
 cin>>p; 
 for(i=0;i < 20;i++) 
 { 
 edge[i][0]=edge[i][0]/(p*edge[i][0]+1);  edge[i][1]=edge[i][1]/(p*edge[i][0]+1);  edge[i][2]=edge[i][2]/(p*edge[i][0]+1);  } 
 draw_cube(edge); 
 break; 
 case 2: 
 cout<<" Enter Q :="; 
 cin>>q; 
 for(i=0;i < 20;i++) 
 { 
 edge[i][1]=edge[i][1]/(edge[i][1]*q+1);  edge[i][0]=edge[i][0]/(edge[i][1]*q+1);  edge[i][2]=edge[i][2]/(edge[i][1]*q+1);  } 
 draw_cube(edge); 
 break; 
case 3: 
 cout<<" Enter R :="; 
 cin>>r;
 for(i=0;i < 20;i++) 
 { 
 edge[i][2]=edge[i][2]/(edge[i][2]*r+1);  edge[i][0]=edge[i][0]/(edge[i][2]*r+1);  edge[i][1]=edge[i][1]/(edge[i][2]*r+1);  } 
 draw_cube(edge); 
 break; 
} 
closegraph(); 
} 
 void main() 
{ 
 int choice; 
double edge[20][3]={ 
 100,0,0, 
 100,100,0, 
 0,100,0, 
 0,100,100, 
 0,0,100, 
 0,0,0, 
 100,0,0, 
 100,0,100, 
 100,75,100, 
 75,100,100, 
 100,100,75, 
 100,100,0, 
 100,100,75, 
 100,75,100, 
 75,100,100, 
 0,100,100, 
 0,100,0, 
 0,0,0,
 0,0,100, 
 100,0,100 
 }; 
while(1) 
{ 
 clrscr(); 
 show_message(); 
 cout<<"1:==> Draw Cube "<<endl;  cout<<"2:==> Scaling "<<endl; 
 cout<<"3:==> Rotation "<<endl; 
 cout<<"4:==> Reflection "<<endl;  cout<<"5:==> Translation "<<endl;  cout<<"6:==> Perspective Projection "<<endl;  cout<<"7:==> Exit "<<endl; 
 cout<<" Enter Your Choice :="; 
 cin>>choice; 
 switch(choice) 
 { 
 case 1: 
 draw_cube(edge); 
 break; 
 case 2: 
 scale(edge); 
 break; 
 case 3: 
 rotate(edge); 
 break; 
 case 4: 
 reflect(edge); 
 break; 
 case 5: 
 translate(edge); 
 break;
 case 6: 
 perspect(edge); 
 break; 
 case 7: 
 exit(0); 
 default: 
 cout<<" Press A Valid Key...!!! "; 
 getch(); 
 break; 
 } 
 closegraph(); 
 } 
} 
Q8. Write a program to draw Hermite/Bezier curve. 
 #include <stdio.h> 
 #include <stdlib.h> 
 #include <graphics.h> 
 #include <math.h> 
 #include <conio.h> 
 #include <iostream.h> 
 void bezier (int x[4], int y[4]) 
 { 
 int gd = DETECT, gm; 
 int i; 
 double t; 
 initgraph (&gd, &gm, "..\\bgi"); 
 for (t = 0.0; t < 1.0; t += 0.0005) 
 { 
 double xt = pow (1-t, 3) * x[0] + 3 * t * pow (1-t, 2) * x[1] + 3 * pow (t, 2) * (1-t) * x[2] + pow (t, 3) * x[3];  double yt = pow (1-t, 3) * y[0] + 3 * t * pow (1-t, 2) * y[1] + 3 * pow (t, 2) * (1-t) * y[2] + pow (t, 3) * y[3];  putpixel (xt, yt, WHITE);
 } 
 for (i=0; i<4; i++) 
 putpixel (x[i], y[i], YELLOW); 
 } 
 void main() 
 { 
 int x[4], y[4]; 
 int i; 
 printf ("Enter the x- and y-coordinates of the four control points.\n");  for (i=0; i<4; i++) 
 cin>>x[i]>>y[i]; 
 bezier (x, y) 
 getch(); 
 closegraph(); 
 return; 
 }
